import numpy as np

# 输入数据
data=np.array([[30, 88.7, 3.7, 6.6],
      [90, 220, 7.4, 7.3],
      [18.8, 178, 5.7, 7.4],
      [34, 150, 5.4, 7.8],
      [90, 170, 11.3, 9],
    [62.6, 165, 9.4, 9],
               [11, 115, 5, 5.7],
               [43.4,123,6,5],
               [98.6,120,6.5,3.8],
               [55.4,176,7.3,9.3],
               [48.75,180,8.3,5],
               [62.5,175,7.25,5]])
'''
30 88.7 3.7 6.6
90 220 7.4 7.3
18.8 178 5.7 7.4
34 150 5.4 7.8
90 170 11.3 9
62.6 165 9.4 9
11 115 5 5.7
43.4 123 6 5
98.6 120 6.5 3.8
55.4 176 7.3 9.3
48.75 180 8.3 5
62.5 175 7.25 5
75 180 8.3 5
50 130 6 5
80 180 6.7 5.5
57 180 8.3 5
89 236 8.3 5
108.4 140 8 5.5










30 88.7 3.7 6.6
90 220 7.4 7.3
18.8 178 5.7 7.4
34 150 5.4 7.8
90 170 11.3 9
62.6 165 9.4 9
11 115 5 5.7
43.4 123 6 5
98.6 120 6.5 3.8
55.4 176 7.3 9.3
48.75 180 8.3 5
62.5 175 7.25 5
75 180 8.3 5
50 130 6 5
80 180 6.7 5.5
57 180 8.3 5
89 236 8.3 5
108.4 140 8 5.5
56.1 131.99 9.44 7.44
60.7 111.5 7.86 6.16
54.2 133.99 9.09 7.08
70.3 128.52 8.73 6.43
35 133.4 9.3 2.9
47.6 80.3 3.5 5
44.7 82.4 4.7 6.6
43.62 78.1 3.2 6
47.56 58.5 3.5 5
91.43 157.63 11.96 6.27
66.77 148.38 8.46 5.08
51.5 132.05 6.33 4.63
35.82 127.93 4.43 3.67
21.5 107.52 2.98 2.29
18.32 96.41 2.01 1.87
110.35 167.19 12.67 6.83
26.06 118.46 3.51 2.89
60 135 15.04 4.86
60 66.49 9.72 2.15
60 106.38 11.2 6.11
60 86.03 7.14 2.85
60 145.19 9.3 3.5

'''

def CRITIC_weight(x):
    # 反向归一化
    x = (np.max(x, axis=0) - x) / (np.max(x, axis=0) - np.min(x, axis=0))
    # 对比性
    the = np.std(x, axis=0)
    # 矛盾性
    # 矩阵转置
    data3 = list(map(list, zip(*x)))

    r = np.corrcoef(data3)  # 求皮尔逊相关系数
    f = np.sum(1 - r, axis=1)
    # 信息承载量
    c = the * f
    # 计算权重
    w = c / np.sum(c, axis=0)
    return w


x = data
w = CRITIC_weight(x)
print(w)